---
export const prerender =  false;

import { sanityClient } from 'sanity:client';
import groq from 'groq';
import PostPage from '../[...slug].astro';
import PreviewOverlay from '../../components/PreviewOverlay.astro';
import type { InferGetStaticPropsType } from 'astro';
import type { getStaticPaths } from '../[...slug].astro';
import { validatePreviewUrl } from '@sanity/preview-url-secret';
import { fakeSanityPreviewUrl } from '../../util';

const previewPostPageQuery = groq`
    *[
        _type == "post" &&
        datePublished == $datePublished &&
        slug.current == $slug
    ]{
        ...,
        topic->
    }[0]
`;

const secret = Astro.cookies.get('previewSecret')?.value;
if (!secret) {
    return new Response("HTTP 400", { status: 400 });
}

const { isValid } = await validatePreviewUrl(
    sanityClient,
    fakeSanityPreviewUrl(Astro.url.origin, secret)
);
if (!isValid) {
    return new Response("HTTP 401", { status: 401 });
}

const { slug } = Astro.params;

const slugComponents = slug?.split('/');
if (slugComponents?.length != 4) {
    return new Response("HTTP 400", { status: 400 });
}

const datePublished = slugComponents.slice(0, 3).join('-');
const slugRoot = slugComponents.at(-1);

type PostPageQueryResult = InferGetStaticPropsType<typeof getStaticPaths>;

const post = await sanityClient.fetch<PostPageQueryResult>(previewPostPageQuery, {
    datePublished,
    slug: slugRoot
}, {
    perspective: 'previewDrafts'
});

if (!post) {
    return new Response("HTTP 404", { status: 404 });
}
---

<PostPage { ...post }>
    <PreviewOverlay />
</PostPage>